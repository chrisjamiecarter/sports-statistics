// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SportsStatistics.Infrastructure.Database;

#nullable disable

namespace SportsStatistics.Infrastructure.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251014184222_AddedSeasonFkToCompetition")]
    partial class AddedSeasonFkToCompetition
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SportsStatistics.Domain.Competitions.Competition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Competitions", "sports");
                });

            modelBuilder.Entity("SportsStatistics.Domain.Fixtures.Fixture", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompetitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("KickoffTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Opponent")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("Fixtures", "sports");
                });

            modelBuilder.Entity("SportsStatistics.Domain.Players.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SquadNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Players", "sports");
                });

            modelBuilder.Entity("SportsStatistics.Domain.Seasons.Season", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Seasons", "sports");
                });

            modelBuilder.Entity("SportsStatistics.Domain.Competitions.Competition", b =>
                {
                    b.HasOne("SportsStatistics.Domain.Seasons.Season", null)
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportsStatistics.Domain.Fixtures.Fixture", b =>
                {
                    b.HasOne("SportsStatistics.Domain.Competitions.Competition", null)
                        .WithMany()
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SportsStatistics.Domain.Fixtures.FixtureScore", "Score", b1 =>
                        {
                            b1.Property<Guid>("FixtureId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("AwayGoals")
                                .HasColumnType("int");

                            b1.Property<int>("HomeGoals")
                                .HasColumnType("int");

                            b1.HasKey("FixtureId");

                            b1.ToTable("Fixtures", "sports");

                            b1.WithOwner()
                                .HasForeignKey("FixtureId");
                        });

                    b.Navigation("Score")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

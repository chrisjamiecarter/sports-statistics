@using SportsStatistics.Application.Abstractions.Messaging
@using SportsStatistics.Domain.Players
@using SportsStatistics.Web.Abstractions.Messaging
<FluentCard Width="100%">

    <FluentLabel Typo="Typography.Header">
        @HeaderText
    </FluentLabel>

    <FluentDivider />

    <EditForm Model="@Input" OnSubmit="@HandleSubmitAsync" FormName="player-form" style="width: 100%">
        <FluentStack Orientation="Orientation.Vertical">
            <div class="full-width">
                <FluentTextField Name="Input.Name" @bind-Value="Input.Name" AutoComplete="player-name" Required="true" Placeholder="Name" Label="Name" Style="width: 100%" />
            </div>
            <div class="full-width">
                <FluentDatePicker Name="Input.DateOfBirth" @bind-Value="Input.DateOfBirth" Required="true" Label="Date of Birth" Style="width: 100%" />
            </div>
            <div class="full-width">
                <FluentTextField Name="Input.Nationality" @bind-Value="Input.Nationality" AutoComplete="player-nationality" Required="true" Placeholder="Nationality" Label="Nationality" Style="width: 100%" />
            </div>
            <div class="full-width">
                <FluentNumberField Name="Input.SquadNumber" @bind-Value="Input.SquadNumber" Required="true" Label="Squad Number" />
            </div>
            <div class="full-width">
                <FluentSelect Id="PositionSelect"
                              Name="Input.Position"
                              TOption="@PositionOptionDto"
                              Label="Position"
                              Items="@Position.All.Select(p => p.ToDto())"
                              Width="100%"
                              Placeholder="Select a position..."
                              OptionValue="@(p => p.Name)"
                              OptionText="@(p => p.Name)"
                              @bind-Value="@Input.Position"                              
                              Required="@(Mode is FormMode.Add)" />
            </div>
            <FluentStack Orientation="Orientation.Horizontal">
                <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%">
                    @SubmitButtonText
                </FluentButton>
                <FluentButton Type="ButtonType.Button" Appearance="Appearance.Stealth" Style="width: 100%" OnClick="@HandleCancelAsync">
                    Cancel
                </FluentButton>
            </FluentStack>
        </FluentStack>
    </EditForm>

</FluentCard>

@code {
    private bool IsSubmitting = false;

    public enum FormMode
    {
        Add = 1,
        Edit = 2,
    }

    [Parameter]
    public PlayerDto? Player { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback<PlayerInputModel> OnSubmit { get; set; }

    [SupplyParameterFromForm]
    private PlayerInputModel Input { get; set; } = new();

    public FormMode Mode => Player is null ? FormMode.Add : FormMode.Edit;

    public string HeaderText => $"{(Mode is FormMode.Add ? "Add" : "Edit")} Player";

    public string SubmitButtonText => Mode is FormMode.Add ? "Create" : "Update";

    protected override void OnParametersSet()
    {
        if (!IsSubmitting && Player is not null)
        {
            Input = Player.ToInputModel();
        }
    }

    private async Task HandleCancelAsync()
    {
        await OnCancel.InvokeAsync();
    }

    private async Task HandleCloseAsync()
    {
        await OnClose.InvokeAsync();
    }

    private async Task HandleSubmitAsync(EditContext context)
    {
        IsSubmitting = true;
        if (context.Model is PlayerInputModel player)
        {
            // TODO: Validation.
            await OnSubmit.InvokeAsync(player);
        }
    }
}

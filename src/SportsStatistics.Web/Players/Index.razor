@page "/admin/players"

<PageTitle>Players / Team Management</PageTitle>

<FluentCard>
    
    <FluentLabel Typo="Typography.Header">
        Players / Team Management
    </FluentLabel>

    @if (PlayerFormVisible)
    {
        <PlayerForm Player="@SelectedPlayer" OnCancel="HidePlayerForm" OnClose="HidePlayerForm"  OnSubmit="HandleSubmitAsync" />
    }
    else
    {
        <FluentButton Appearance="Appearance.Accent" OnClick="(() => ShowPlayerForm())">
            Add Player
        </FluentButton>

        <PlayerList Players="@Players" OnDeletePlayer="@HandleDeletePlayer" OnEditPlayer="@HandleEditPlayer" />
    }

</FluentCard>

@code {
    private IQueryable<PlayerDto>? Players { get; set; }

    private bool PlayerFormVisible { get; set; }

    private PlayerDto? SelectedPlayer { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadPlayersAsync();
    }

    public async Task Test(PlayerDto player)
    {
        await Task.CompletedTask;
    }

    private void HidePlayerForm()
    {
        PlayerFormVisible = false;
        SelectedPlayer = null;
    }

    private async Task LoadPlayersAsync()
    {
        var request = new GetPlayersQuery();
        var result = await Messenger.SendAsync(request);
        if (result.IsFailure)
        {
            ToastService.ShowError("Unable to load players");
        }

        Players = result.Value.ToQueryable();
    }

    private void ShowPlayerForm(PlayerDto? player = null)
    {
        SelectedPlayer = player;
        PlayerFormVisible = true;
    }

    private async Task HandleCreatePlayer(PlayerInputModel player)
    {
        var command = new CreatePlayerCommand(player.Name, player.SquadNumber, player.Nationality, DateOnly.FromDateTime(player.DateOfBirth.GetValueOrDefault()), player.Position);
        var result = await Messenger.SendAsync(command);

        if (result.IsSuccess)
        {
            ToastService.ShowSuccess("Player created successfully.");
            await LoadPlayersAsync();
            HidePlayerForm();
        }
        else
        {
            ToastService.ShowError(result.Error.Description);
        }
    }

    private async Task HandleDeletePlayer(PlayerDto player)
    {
        var dialog = await DialogService.ShowConfirmationAsync($"Are you sure you want to delete {player.Name}?", "Delete", "Cancel", "Confirm player delete");
        var dialogResult = await dialog.Result;

        if (dialogResult.Cancelled)
        {
            return;
        }

        var command = new DeletePlayerCommand(player.Id);
        var commandResult = await Messenger.SendAsync(command);

        if (commandResult.IsSuccess)
        {
            ToastService.ShowSuccess("Player deleted successfully.");
        }
        else
        {
            ToastService.ShowError(commandResult.Error.Description);
        }

        await LoadPlayersAsync();
    }

    private async Task HandleUpdatePlayer(PlayerInputModel player)
    {
        // TODO: Split out PlayerInputModel into CreatePlayerDto and UpdatePlayerDto
        if (SelectedPlayer is null)
        {
            ToastService.ShowError("No player selected.");
            return;
        }

        var command = new UpdatePlayerCommand(SelectedPlayer.Id, player.Name, player.SquadNumber, player.Nationality, DateOnly.FromDateTime(player.DateOfBirth.GetValueOrDefault()), player.Position);
        var result = await Messenger.SendAsync(command);

        if (result.IsSuccess)
        {
            ToastService.ShowSuccess("Player updated successfully.");
            await LoadPlayersAsync();
            HidePlayerForm();
        }
        else
        {
            ToastService.ShowError(result.Error.Description);
        }
    }

    private void HandleEditPlayer(PlayerDto player)
    {
        ShowPlayerForm(player);
    }

    private async Task HandleSubmitAsync(PlayerInputModel player)
    {
        if (SelectedPlayer is null)
        {
            var command = new CreatePlayerCommand(player.Name, player.SquadNumber, player.Nationality, DateOnly.FromDateTime(player.DateOfBirth.GetValueOrDefault()), player.Position);
            var result = await Messenger.SendAsync(command);

            if (result.IsSuccess)
            {
                ToastService.ShowSuccess("Player created successfully.");
                await LoadPlayersAsync();
                HidePlayerForm();
            }
            else
            {
                ToastService.ShowError(result.Error.Description);
            }
        }
        else
        {
            var command = new UpdatePlayerCommand(SelectedPlayer.Id, player.Name, player.SquadNumber, player.Nationality, DateOnly.FromDateTime(player.DateOfBirth.GetValueOrDefault()), player.Position);
            var result = await Messenger.SendAsync(command);

            if (result.IsSuccess)
            {
                ToastService.ShowSuccess("Player updated successfully.");
                await LoadPlayersAsync();
                HidePlayerForm();
            }
            else
            {
                ToastService.ShowError(result.Error.Description);
            }
        }
    }
}

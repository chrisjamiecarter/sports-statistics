@page "/signin"

@inject IAuthService AuthenticationService
@inject NavigationManager NavigationManager
@inject IdentityRedirectService RedirectService

<PageTitle>Sign In</PageTitle>

<div class="container-centered">

    <FluentCard Width="400px">
        <FluentStack Orientation="Orientation.Vertical">

            <FluentLabel Typo="Typography.H3" Alignment="HorizontalAlignment.Center">
                Sign In
            </FluentLabel>

            <FluentSpacer />

            <IdentityStatus StatusModel="@(IdentityStatus)" />
            <EditForm Model="Input" method="post" OnValidSubmit="SignInUserAsync" FormName="signin" style="width: 100%">
                <DataAnnotationsValidator />
                
                <FluentStack Orientation="Orientation.Vertical">
                    <div class="full-width">
                        <FluentTextField Name="Input.Email" @bind-Value="Input.Email" AutoComplete="username" Required="true" Placeholder="name@example.com" Label="Email" Style="width: 100%" />
                        <FluentValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>
                    <div class="full-width">
                        <FluentTextField type="password" Name="Input.Password" @bind-Value="Input.Password" AutoComplete="current-password" Required="true" Placeholder="password" Label="Password" Style="width: 100%" />
                        <FluentValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>
                    <div class="full-width">
                        <FluentCheckbox Name="Input.RememberMe" @bind-Value="Input.RememberMe" Label="Remember me" />
                    </div>
                    <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%">Log in</FluentButton>
                </FluentStack>
            </EditForm>

            <FluentDivider />

            <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Center">
                <FluentAnchor Appearance="Appearance.Hypertext" Href="Account/ForgotPassword">Forgot your password?</FluentAnchor>
                <FluentSpacer />
                <FluentAnchor Appearance="Appearance.Hypertext" Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</FluentAnchor>
            </FluentStack>

        </FluentStack>
    </FluentCard>

</div>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private SigninInputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private StatusModel IdentityStatus { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean sign in process.
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task SignInUserAsync()
    {
        var result = await AuthenticationService.SignInAsync(Input.Email, Input.Password, Input.RememberMe);
        if (result.IsSuccess)
        {
            RedirectService.RedirectTo(ReturnUrl);
        }
        else
        {
            IdentityStatus = new(result.Error.Message, StatusLevel.Error);
        }
    }
}

@page "/signin"

<PageTitle>Sign In</PageTitle>

<div class="container-centered">

    <FluentCard Width="400px">
        <FluentStack Orientation="Orientation.Vertical">

            <FluentLabel Typo="Typography.H3" Alignment="HorizontalAlignment.Center">
                Sign In
            </FluentLabel>

            <FluentSpacer />

            <StatusMessageBar StatusModel="SignInStatus" />
            <EditForm Model="Input" method="post" OnValidSubmit="SignInUserAsync" FormName="signin" style="width: 100%">
                <DataAnnotationsValidator />
                
                <FluentStack Orientation="Orientation.Vertical">
                    <div class="full-width">
                        <FluentTextField Name="Input.Email" @bind-Value="Input.Email" AutoComplete="username" Required="true" Placeholder="name@example.com" Label="Email" Style="width: 100%" />
                        <FluentValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>
                    <div class="full-width">
                        <FluentTextField type="password" Name="Input.Password" @bind-Value="Input.Password" AutoComplete="current-password" Required="true" Placeholder="password" Label="Password" Style="width: 100%" />
                        <FluentValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>
                    <div class="full-width">
                        <FluentCheckbox Name="Input.RememberMe" @bind-Value="Input.IsPersistant" Label="Remember me" />
                    </div>
                    <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%">Log in</FluentButton>
                </FluentStack>
            </EditForm>

            <FluentDivider />

            <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Center">
                <FluentAnchor Appearance="Appearance.Hypertext" Href="Account/ForgotPassword">Forgot your password?</FluentAnchor>
            </FluentStack>

        </FluentStack>
    </FluentCard>

</div>

@code {
    private IJSObjectReference? _authJS;

    [SupplyParameterFromForm]
    private SigninInputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private StatusModel SignInStatus { get; set; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _authJS = await JS.InvokeAsync<IJSObjectReference>("import", "/js/auth.js");
        }
    }

    public async Task SignInUserAsync()
    {
        if (_authJS is not null)
        {
            var response = await _authJS.InvokeAsync<SignInResponse>("postSignin", new
            {
                email = Input.Email,
                password = Input.Password,
                isPersistant = Input.IsPersistant,
            });

            if (response.IsSuccess)
            {
                Navigation.NavigateTo(ReturnUrl ?? Routes.Home, true);
            }
            else
            {
                SignInStatus = new StatusModel(response.Message, StatusLevel.Error);
            }
        }
    }
}

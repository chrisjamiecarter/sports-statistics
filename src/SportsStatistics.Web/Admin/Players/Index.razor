@page "/admin/players"

<PageTitle>Players</PageTitle>

<FluentCard>

    <FluentBreadcrumb>
        <FluentBreadcrumbItem Appearance="Appearance.Hypertext" Href="@Routes.Admin.Index">
            Admin
        </FluentBreadcrumbItem>
        <FluentBreadcrumbItem Appearance="Appearance.Accent">
            Players
        </FluentBreadcrumbItem>
    </FluentBreadcrumb>

    @if (IsPlayerFormVisible)
    {
        <PlayerForm OnCancel="HidePlayerForm" OnSubmit="OnSubmitAsync" SelectedPlayer="SelectedPlayer" />
    }
    else
    {
        <PlayerList Players="Players" OnAddPlayer="@(() => ShowPlayerForm())" OnDeletePlayer="OnDeletePlayer" OnEditPlayer="ShowPlayerForm" />
    }

</FluentCard>

@code {
    private enum PlayerFormMode
    {
        Hide,
        Show,
    }

    private PlayerFormMode FormMode { get; set; } = PlayerFormMode.Hide;

    private IQueryable<PlayerDto>? Players { get; set; }

    private PlayerDto? SelectedPlayer { get; set; }

    private bool IsPlayerFormVisible => FormMode == PlayerFormMode.Show;

    protected override async Task OnInitializedAsync()
    {
        await LoadPlayersAsync();
    }

    private void HidePlayerForm()
    {
        SelectedPlayer = null;
        FormMode = PlayerFormMode.Hide;
    }

    private void ShowPlayerForm(PlayerDto? player = null)
    {
        SelectedPlayer = player;
        FormMode = PlayerFormMode.Show;
    }

    private async Task LoadPlayersAsync()
    {
        var request = new GetAllPlayersQuery();
        var result = await Messenger.SendAsync(request);
        if (result.IsFailure)
        {
            ToastService.ShowError("Unable to load players");
        }

        Players = result.Value.ToQueryable();
    }

    private async Task<bool> GetUserConfirmation(string message, string primaryText, string secondaryText)
    {
        var dialog = await DialogService.ShowConfirmationAsync(message, primaryText, secondaryText);
        var result = await dialog.Result;
        return !result.Cancelled;
    }

    private async Task OnDeletePlayer(PlayerDto player)
    {
        if (await GetUserConfirmation($"Are you sure you want to delete <strong>{player.Name}</strong>?", "Delete", "Cancel"))
        {
            await HandleDeletePlayerAsync(new DeletePlayerCommand(player.Id));
        }
    }

    private async Task OnSubmitAsync(PlayerFormModel formModel)
    {
        if (SelectedPlayer is null)
        {
            await HandleCreatePlayerAsync(formModel.ToCommand());
        }
        else
        {
            await HandleUpdatePlayerAsync(formModel.ToCommand(SelectedPlayer.Id));
        }
    }

    private async Task HandleCreatePlayerAsync(CreatePlayerCommand command)
    {
        var result = await Messenger.SendAsync(command);
        await HandleResultAsync(result, "Player created successfully.");
    }

    private async Task HandleDeletePlayerAsync(DeletePlayerCommand command)
    {
        var result = await Messenger.SendAsync(command);
        await HandleResultAsync(result, "Player deleted successfully.");
    }

    private async Task HandleUpdatePlayerAsync(UpdatePlayerCommand command)
    {
        var result = await Messenger.SendAsync(command);
        await HandleResultAsync(result, "Player updated successfully.");
    }

    private async Task HandleResultAsync(Result result, string successMessage)
    {
        if (result.IsSuccess)
        {
            ToastService.ShowSuccess(successMessage);
            await LoadPlayersAsync();
            HidePlayerForm();
        }
        else
        {
            if (result.Error is ValidationError validationError)
            {
                var errorDescription = string.Join(Environment.NewLine, validationError.Errors.Select(e => e.Description));
                ToastService.ShowError(errorDescription);
            }
            else
            {
                ToastService.ShowError(result.Error.Description);
            }
        }
    }
}

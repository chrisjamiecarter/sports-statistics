<FluentStack HorizontalAlignment="HorizontalAlignment.Stretch" Orientation="Orientation.Vertical">

    <FluentStack>
        <FluentLabel Typo="Typography.Header">
            Players
        </FluentLabel>

        <FluentSpacer />

        <FluentButton Appearance="Appearance.Accent" OnClick="Add">
            Add Player
        </FluentButton>
    </FluentStack>


    @if(Players is null)
    {
        <FluentProgressRing />
    }
    else
    {
        <FluentDataGrid Items="@Players?.AsQueryable()" Pagination="@Pagination" RowSize="DataGridRowSize.Medium">
            <PropertyColumn Property="@(p => p.SquadNumber)" Sortable="true" IsDefaultSortColumn="true" />
            <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Position)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Age)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Nationality)" Sortable="true" />
            
            <TemplateColumn>
                <FluentButton Appearance="Appearance.Accent" @onclick="@(() => Edit(context))">Edit</FluentButton>
                <FluentButton Appearance="Appearance.Accent" @onclick="@(() => Delete(context))">Delete</FluentButton>
            </TemplateColumn>
        </FluentDataGrid>

        <FluentPaginator State="@Pagination" />
    }

</FluentStack>

@code {
    private PaginationState Pagination = new PaginationState() { ItemsPerPage = 10 };

    [Parameter]
    public EventCallback OnAddPlayer { get; set; }

    [Parameter]
    public EventCallback<PlayerDto> OnDeletePlayer { get; set; }

    [Parameter]
    public EventCallback<PlayerDto> OnEditPlayer { get; set; }

    [Parameter]
    public IQueryable<PlayerDto>? Players { get; set; }

    private async Task Add()
    {
        await OnAddPlayer.InvokeAsync();
    }

    private async Task Delete(PlayerDto player)
    {
        await OnDeletePlayer.InvokeAsync(player);
    }

    private async Task Edit(PlayerDto player)
    {
        await OnEditPlayer.InvokeAsync(player);
    }
}

<FluentCard Width="100%">

    <FluentLabel Typo="Typography.Header">
        @HeaderText
    </FluentLabel>

    <FluentDivider />

    <EditForm Model="@Input" OnSubmit="OnSubmitAsync" FormName="player-form" style="width: 100%">
        <FluentStack Orientation="Orientation.Vertical">
            <div class="full-width">
                <FluentTextField Name="Input.Name" @bind-Value="Input.Name" AutoComplete="player-name" Required="true" Placeholder="Name" Label="Name" Style="width: 100%" />
            </div>
            <div class="full-width">
                <FluentDatePicker Name="Input.DateOfBirth" @bind-Value="Input.DateOfBirth" Required="true" Label="Date of Birth" Style="width: 100%" />
            </div>
            <div class="full-width">
                <FluentTextField Name="Input.Nationality" @bind-Value="Input.Nationality" AutoComplete="player-nationality" Required="true" Placeholder="Nationality" Label="Nationality" Style="width: 100%" />
            </div>
            <div class="full-width">
                <FluentNumberField Name="Input.SquadNumber" @bind-Value="Input.SquadNumber" Required="true" Label="Squad Number" />
            </div>
            <div class="full-width">
                <FluentSelect Id="PositionSelect"
                              Name="Input.Position"
                              TOption=PositionOptionDto
                              Label="Position"
                              Items="PositionOptions"
                              Width="100%"
                              Placeholder="Select a position..."
                              OptionText="(p => p.Name)"
                              @bind-SelectedOption="Input.Position"
                              Required="!IsUpdateMode"/>
            </div>
            <FluentStack Orientation="Orientation.Horizontal">
                <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%" Loading="IsSubmitting">
                    @SubmitButtonText
                </FluentButton>
                <FluentButton Type="ButtonType.Button" Appearance="Appearance.Stealth" Style="width: 100%" OnClick="OnCancelAsync">
                    Cancel
                </FluentButton>
             </FluentStack>
        </FluentStack>
    </EditForm>

</FluentCard>

@code {
    private bool IsSubmitting = false;
    private IEnumerable<PositionOptionDto> PositionOptions = Position.All.Select(p => p.ToDto());

    [Parameter]
    public PlayerDto? SelectedPlayer { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback<PlayerFormModel> OnSubmit { get; set; }

    [SupplyParameterFromForm]
    private PlayerFormModel Input { get; set; } = new();

    private bool IsUpdateMode => SelectedPlayer is not null;

    private string HeaderText => $"{(IsUpdateMode ? "Edit" : "Add")} Player";

    private string SubmitButtonText => IsUpdateMode ? "Update" : "Create";

    protected override void OnParametersSet()
    {
        if (!IsSubmitting && SelectedPlayer is not null)
        {
            Input = SelectedPlayer.ToInputModel(PositionOptions);
        }
    }

    private async Task OnCancelAsync()
    {
        await OnCancel.InvokeAsync();
    }

    private async Task OnSubmitAsync(EditContext context)
    {
        IsSubmitting = true;

        if (context.Model is PlayerFormModel player)
        {
            // TODO: Validation.
            await OnSubmit.InvokeAsync(player);
        }

        IsSubmitting = false;
    }
}

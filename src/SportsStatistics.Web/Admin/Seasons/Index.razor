@page "/admin/seasons"

<PageTitle>Seasons</PageTitle>

<FluentCard>

    @if (IsSeasonFormVisible)
    {
        <SeasonForm OnCancel="HideSeasonForm" OnSubmit="OnSubmitAsync" SelectedSeason="SelectedSeason" />
    }
    else
    {
        <SeasonList Seasons="Seasons" AddSeasonCallback="@(() => ShowSeasonForm())" DeleteSeasonCallback="OnDeleteSeasonAsync" EditSeasonCallback="ShowSeasonForm" />
    }
</FluentCard>

@code {
    private enum SeasonFormMode
    {
        Hide,
        Show,
    }

    private SeasonFormMode FormMode { get; set; } = SeasonFormMode.Hide;

    private IQueryable<SeasonDto>? Seasons { get; set; }

    private SeasonDto? SelectedSeason { get; set; }

    private bool IsSeasonFormVisible => FormMode == SeasonFormMode.Show;

    protected override async Task OnInitializedAsync()
    {
        await LoadSeasonsAsync();
    }

    private void HideSeasonForm()
    {
        SelectedSeason = null;
        FormMode = SeasonFormMode.Hide;
    }

    private void ShowSeasonForm(SeasonDto? season = null)
    {
        SelectedSeason = season;
        FormMode = SeasonFormMode.Show;
    }

    private async Task LoadSeasonsAsync()
    {
        var request = new GetSeasonsQuery();
        var result = await Messenger.SendAsync(request);
        if (result.IsFailure)
        {
            // TODO: confirm.
            //ToastService.ShowError(result.Error.Description);
            // OR
            ToastService.ShowError("Unable to load seasons");
        }

        Seasons = result.Value.ToQueryable();
    }

    private async Task<bool> GetUserConfirmationAsync(string message, string primaryText, string secondaryText)
    {
        var dialog = await DialogService.ShowConfirmationAsync(message, primaryText, secondaryText);
        var result = await dialog.Result;
        return !result.Cancelled;
    }

    private async Task OnDeleteSeasonAsync(SeasonDto season)
    {
        if (await GetUserConfirmationAsync($"Are you sure you want to delete <strong>{season.Name}</strong>?", "Delete", "Cancel"))
        {
            await DeleteSeasonAsync(season.ToDeleteCommand());
        }
    }

    private async Task OnSubmitAsync(SeasonFormModel season)
    {
        if (SelectedSeason is null)
        {
            await CreateSeasonAsync(season.ToCreateCommand());
        }
        else
        {
            await UpdateSeasonAsync(season.ToUpdateCommand(SelectedSeason.Id));
        }
    }

    private async Task CreateSeasonAsync(CreateSeasonCommand command)
    {
        var result = await Messenger.SendAsync(command);
        await HandleResultAsync(result, "Season created successfully.");
    }

    private async Task DeleteSeasonAsync(DeleteSeasonCommand command)
    {
        var result = await Messenger.SendAsync(command);
        await HandleResultAsync(result, "Season deleted successfully.");
    }

    private async Task UpdateSeasonAsync(UpdateSeasonCommand command)
    {
        var result = await Messenger.SendAsync(command);
        await HandleResultAsync(result, "Season updated successfully.");
    }

    private async Task HandleResultAsync(Result result, string successMessage)
    {
        if (result.IsSuccess)
        {
            ToastService.ShowSuccess(successMessage);
            await LoadSeasonsAsync();
            HideSeasonForm();
        }
        else
        {
            if (result.Error is ValidationError validationError)
            {
                var errorDescription = string.Join(Environment.NewLine, validationError.Errors.Select(e => e.Description));
                ToastService.ShowError(errorDescription);
            }
            else
            {
                ToastService.ShowError(result.Error.Description);
            }
        }
    }
}

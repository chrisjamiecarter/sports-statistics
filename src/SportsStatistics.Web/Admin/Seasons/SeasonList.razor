<FluentStack HorizontalAlignment="HorizontalAlignment.Stretch" Orientation="Orientation.Vertical">

    <FluentStack>
        <FluentLabel Typo="Typography.Header">
            Seasons
        </FluentLabel>

        <FluentSpacer />

        <FluentButton Appearance="Appearance.Accent" OnClick="Add">
            Add Season
        </FluentButton>
    </FluentStack>

    <FluentDataGrid Items="@Seasons" Pagination="@Pagination" RowSize="DataGridRowSize.Medium">
        <PropertyColumn Property="@(p => p.Name)" Sortable="true" IsDefaultSortColumn="true" />
        <PropertyColumn Property="@(p => p.StartDate)" Sortable="true" />
        <PropertyColumn Property="@(p => p.EndDate)" Sortable="true" />

        <TemplateColumn Align="Align.End">
            <FluentButton IconEnd="@(new Icons.Regular.Size20.Trophy())" Appearance="Appearance.Accent" OnClick="@(() => NavigateToCompetitions(context))" Title="Competitions" />
            <FluentButton IconEnd="@(new Icons.Regular.Size20.Edit())" Appearance="Appearance.Accent" OnClick="@(() => Edit(context))" Title="Edit" />
            <FluentButton IconEnd="@(new Icons.Regular.Size20.Delete())" Appearance="Appearance.Accent" OnClick="@(() => Delete(context))" Title="Delete" />
        </TemplateColumn>
    </FluentDataGrid>

    <FluentPaginator State="@Pagination" />

</FluentStack>

@code {
    private PaginationState Pagination = new PaginationState() { ItemsPerPage = 10 };

    [Parameter]
    public EventCallback AddSeasonCallback { get; set; }

    [Parameter]
    public EventCallback<SeasonDto> DeleteSeasonCallback { get; set; }

    [Parameter]
    public EventCallback<SeasonDto> EditSeasonCallback { get; set; }

    [Parameter]
    public IQueryable<SeasonDto>? Seasons { get; set; }

    private async Task Add()
    {
        await AddSeasonCallback.InvokeAsync();
    }

    private async Task Delete(SeasonDto season)
    {
        await DeleteSeasonCallback.InvokeAsync(season);
    }

    private async Task Edit(SeasonDto season)
    {
        await EditSeasonCallback.InvokeAsync(season);
    }

    private void NavigateToCompetitions(SeasonDto season)
    {
        // TODO: Change to Routes.Admin.Competitions(season.Id);
        Navigation.NavigateTo($"{Routes.Admin.Competitions}/{season.Id}");
    }
}

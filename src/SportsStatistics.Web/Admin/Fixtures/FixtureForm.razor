@using SportsStatistics.Domain.Fixtures
<FluentStack Orientation="Orientation.Vertical">

    <FluentLabel Typo="Typography.Header">
        @HeaderText
    </FluentLabel>

    <FluentSpacer />

    <EditForm Model="@Input" OnValidSubmit="@HandleValidSubmitAsync" FormName="fixture-form" style="width: 100%">
        <FluentValidator />

        <FluentStack Orientation="Orientation.Vertical">
            <div class="full-width">
                @if (IsUpdateMode)
                {
                    <FluentTextField Name="Input.Competition" Value="@Input.Competition?.Name" ReadOnly="true" Label="Competition" Style="width: 100%" />
                }
                else
                {
                    <FluentSelect Id="CompetitionSelect"
                                  Name="Input.Competition"
                                  TOption=CompetitionDto
                                  Label="Competition"
                                  Items="CompetitionOptions"
                                  Width="100%"
                                  Placeholder="Select a competition..."
                                  OptionText="(c => c.Name)"
                                  @bind-SelectedOption="Input.Competition"
                                  Required="!IsUpdateMode" />
                    <FluentValidationMessage For="() => Input.Competition" class="text-danger" />
                }
            </div>
            <div class="full-width">
                <FluentDatePicker Name="Input.KickoffDateUtc" @bind-Value="Input.KickoffDateUtc" Required="true" Label="Date" Style="width: 100%" />
                <FluentValidationMessage For="() => Input.KickoffDateUtc" class="text-danger" />
            </div>
            <div class="full-width">
                <FluentTimePicker Name="Input.KickoffTimeUtc" @bind-Value="Input.KickoffTimeUtc" Required="true" Label="Kickoff" Style="width: 100%" />
                <FluentValidationMessage For="() => Input.KickoffTimeUtc" class="text-danger" />
            </div>
            <div class="full-width">
                <FluentTextField Name="Input.Opponent" @bind-Value="Input.Opponent" Required="true" Label="Opponent" Style="width: 100%" />
                <FluentValidationMessage For="() => Input.Opponent" class="text-danger" />
            </div>
            <div class="full-width">
                <FluentSelect Id="LocationSelect"
                              Name="Input.Location"
                              TOption=LocationOptionDto
                              Label="Location"
                              Items="LocationOptions"
                              Width="100%"
                              Placeholder="Select a location..."
                              OptionText="(p => p.Name)"
                              @bind-SelectedOption="Input.Location"
                              Required="!IsUpdateMode" />
                <FluentValidationMessage For="() => Input.Location" class="text-danger" />
            </div>
            <FluentStack Orientation="Orientation.Horizontal">
                <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%" Loading="IsSubmitting">
                    @SubmitButtonText
                </FluentButton>
                <FluentButton Type="ButtonType.Button" Appearance="Appearance.Stealth" Style="width: 100%" OnClick="HandleCancelAsync">
                    Cancel
                </FluentButton>
            </FluentStack>
        </FluentStack>
    </EditForm>

</FluentStack>

@code {
    private bool IsSubmitting = false;
    private IEnumerable<LocationOptionDto> LocationOptions = FixtureLocation.All.Select(l => l.ToDto());

    [Parameter]
    public IEnumerable<CompetitionDto> CompetitionOptions { get; set; } = [];

    [Parameter]
    public FixtureDto? SelectedFixture { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback<FixtureFormModel> OnSubmit { get; set; }

    [SupplyParameterFromForm]
    private FixtureFormModel Input { get; set; } = new();

    private bool IsUpdateMode => SelectedFixture is not null;

    private string HeaderText => $"{(IsUpdateMode ? "Edit" : "Add")} Fixture";

    private string SubmitButtonText => IsUpdateMode ? "Update" : "Create";

    protected override void OnParametersSet()
    {
        if (!IsSubmitting)
        {
            Input = SelectedFixture.ToFormModel(CompetitionOptions, LocationOptions);
        }
    }

    private async Task HandleCancelAsync()
    {
        await OnCancel.InvokeAsync();
    }

    private async Task HandleValidSubmitAsync()
    {
        IsSubmitting = true;
        
        await OnSubmit.InvokeAsync(Input);
        
        IsSubmitting = false;
    }
}

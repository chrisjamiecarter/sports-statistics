@page "/admin/fixtures"
@using SportsStatistics.Application.Competitions.GetAll
@using SportsStatistics.Application.Fixtures.GetAll
@using SportsStatistics.Application.Seasons.GetAll
@using SportsStatistics.Web.Admin.Competitions
@using SportsStatistics.Web.Admin.Seasons

<PageTitle>Fixtures</PageTitle>

<FluentCard>

    <FluentSelect TOption="SeasonDto"
                  Label="Season"
                  Items="@Seasons"
                  OptionText="@(s => s.Name)"
                  @bind-SelectedOption="SelectedSeason" />

    <FluentSelect TOption="CompetitionDto"
                  Label="Competition"
                  Items="@Competitions"
                  OptionText="@(s => s.Name)"
                  @bind-SelectedOption="SelectedCompetition" />

    @if (SelectedSeason is not null && SelectedCompetition is not null)
    {
        <FluentButton Appearance="Appearance.Accent" OnClick="ShowFixtureForm">
            Add Fixture
        </FluentButton>

        @if (IsFixtureFormVisible)
        {
            <FixtureForm OnCancel="@HideFixtureForm" OnSubmit="@OnSubmitAsync" SelectedCompetitionId="@SelectedCompetition.Id" />
        }
        else
        {
            <FixtureList Fixtures="@Fixtures" />
        }
    }

</FluentCard>

@code {
    private enum FixtureFormMode
    {
        Hide,
        Show,
    }

    private FixtureFormMode FormMode { get; set; } = FixtureFormMode.Hide;

    private IEnumerable<CompetitionDto>? Competitions { get; set; }

    private IQueryable<FixtureDto>? Fixtures { get; set; }

    private IEnumerable<SeasonDto>? Seasons { get; set; }

    private CompetitionDto? SelectedCompetition { get; set; }

    private SeasonDto? SelectedSeason { get; set; }

    private bool IsFixtureFormVisible => FormMode == FixtureFormMode.Show;

    protected override async Task OnInitializedAsync()
    {
        await LoadCompetitionsAsync();
        await LoadsFixturesAsync();
        await LoadSeasonsAsync();
    }

    private void HideFixtureForm()
    {
        FormMode = FixtureFormMode.Hide;
    }

    private void ShowFixtureForm()
    {
        FormMode = FixtureFormMode.Show;
    }

    private async Task LoadCompetitionsAsync()
    {
        var request = new GetCompetitionsQuery();
        var result = await Messenger.SendAsync(request);
        if (result.IsFailure)
        {
            ToastService.ShowError("Unable to load competitions");
        }

        Competitions = result.Value.Select(x => x.ToDto());

        SelectedCompetition = Competitions.FirstOrDefault();
    }

    private async Task LoadsFixturesAsync()
    {
        var request = new GetFixturesQuery();
        var result = await Messenger.SendAsync(request);
        if (result.IsFailure)
        {
            ToastService.ShowError("Unable to load fixtures");
        }

        Fixtures = result.Value.ToQueryable();
    }

    private async Task LoadSeasonsAsync()
    {
        var request = new GetSeasonsQuery();
        var result = await Messenger.SendAsync(request);
        if (result.IsFailure)
        {
            ToastService.ShowError("Unable to load seasons");
        }

        Seasons = result.Value.Select(x => new SeasonDto(x.Id, x.StartDate, x.EndDate, x.Name));

        var now = DateOnly.FromDateTime(DateTime.Now);
        SelectedSeason = Seasons.FirstOrDefault(x => x.StartDate <= now && now <= x.EndDate);
    }

    private async Task OnSubmitAsync(FixtureFormModel fixture)
    {
        await Task.CompletedTask;
    }
}
